name: master
on: push
jobs:
  test-internals:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    name: test-internals
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.8
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.8
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
      - uses: codecov/codecov-action@v2

  test-defaults:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        execution: [BaseOnPython]
    env:
      MODIN_TEST_DATASET_SIZE: "small"
    name: Test ${{ matrix.execution }} execution, Python 3.8
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.8
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.8
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - uses: codecov/codecov-action@v2

  test-hdk:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      MODIN_EXPERIMENTAL: "True"
      MODIN_ENGINE: "native"
      MODIN_STORAGE_FORMAT: "hdk"
    name: Test HDK storage format, Python 3.8
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Setting up Modin environment
        uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          activate-environment: modin_on_hdk
          environment-file: requirements/env_hdk.yml
          python-version: 3.8
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          activate-environment: modin_on_hdk
          environment-file: requirements/env_hdk.yml
          python-version: 3.8
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
      - uses: codecov/codecov-action@v2

  test-all:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.8"]
        engine: ["python", "ray", "dask"]
    env:
      MODIN_ENGINE: ${{matrix.engine}}
      # Only test reading from SQL server and postgres on ubuntu for now.
      # Eventually, we should test on Windows, too, but we will have to set up
      # the servers differently.
      MODIN_TEST_READ_FROM_SQL_SERVER: true
      MODIN_TEST_READ_FROM_POSTGRES: true
    name: test-ubuntu (engine ${{matrix.engine}}, python ${{matrix.python-version}})
    steps:
      - name: Limit ray memory
        run: echo "MODIN_MEMORY=1000000000" >> $GITHUB_ENV
        if: matrix.engine == 'ray'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
      - uses: codecov/codecov-action@v2

  test-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.8"]
        engine: ["ray", "dask"]
        test-task:
          - modin/pandas/test/dataframe/test_binary.py
          - modin/pandas/test/dataframe/test_default.py
          - modin/pandas/test/dataframe/test_indexing.py
          - modin/pandas/test/dataframe/test_iter.py
          - modin/pandas/test/dataframe/test_join_sort.py
          - modin/pandas/test/dataframe/test_map_metadata.py
          - modin/pandas/test/dataframe/test_reduce.py
          - modin/pandas/test/dataframe/test_udf.py
          - modin/pandas/test/dataframe/test_window.py
          - modin/pandas/test/dataframe/test_pickle.py
          - modin/pandas/test/test_series.py
          - modin/pandas/test/test_rolling.py
          - modin/pandas/test/test_concat.py
          - modin/pandas/test/test_groupby.py
          - modin/pandas/test/test_reshape.py
          - modin/pandas/test/test_general.py
          - modin/pandas/test/test_io.py
    env:
      MODIN_ENGINE: ${{matrix.engine}}
    name: test-windows
    steps:
      - name: Limit ray memory
        run: echo "MODIN_MEMORY=1000000000" >> $GITHUB_ENV
        if: matrix.engine == 'ray'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          auto-update-conda: true # this enable `use-only-tar-bz2` feature on Windows
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          auto-update-conda: true # this enable `use-only-tar-bz2` feature on Windows
      - name: Conda environment
        run: |
          conda info
          conda list
      - uses: codecov/codecov-action@v2

  test-pyarrow:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.8"]
    env:
      MODIN_STORAGE_FORMAT: pyarrow
      MODIN_EXPERIMENTAL: "True"
    name: test (pyarrow, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list

  test-spreadsheet:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.8"]
        engine: ["ray", "dask"]
    env:
      MODIN_EXPERIMENTAL: "True"
      MODIN_ENGINE: ${{matrix.engine}}
    name: test-spreadsheet (engine ${{matrix.engine}}, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        continue-on-error: true
        id: conda1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - uses: conda-incubator/setup-miniconda@v2
        if: steps.conda1.outcome == 'failure'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
