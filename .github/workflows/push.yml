name: master
on: push
jobs:
  test-all:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.8"]
        engine: ["dask"]
    env:
      MODIN_ENGINE: ${{matrix.engine}}
      MODIN_MEMORY: 1000000000
      # Only test reading from SQL server and postgres on ubuntu for now.
      # Eventually, we should test on Windows, too, but we will have to set up
      # the servers differently.
      MODIN_TEST_READ_FROM_SQL_SERVER: true
      MODIN_TEST_READ_FROM_POSTGRES: true
    name: test-ubuntu (engine ${{matrix.engine}}, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2        
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('environment-dev.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - name: Set up postgres
        # Locally, specifying port 2345:5432 works, but 2345:2345 and 5432:5432 do not. This solution is from
        # https://stackoverflow.com/questions/36415654/cant-connect-docker-postgresql-9-3
        run: |
          sudo docker pull postgres
          sudo docker run --name some-postgres -e POSTGRES_USER=sa -e POSTGRES_PASSWORD=Strong.Pwd-123 -e POSTGRES_DB=postgres -d -p 2345:5432 postgres
      - name: Setup upterm session
        uses: lhotari/action-upterm@v1            
      - run: pytest -n 2 modin/experimental/xgboost/test/test_default.py
      - run: pytest -n 2 modin/experimental/xgboost/test/test_xgboost.py
        if: matrix.engine == 'ray'
      - run: pytest -n 2 modin/experimental/xgboost/test/test_dmatrix.py
        if: matrix.engine == 'ray'
      - run: pytest -n 2 modin/pandas/test/dataframe/test_binary.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_default.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_iter.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_map_metadata.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_reduce.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_udf.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_window.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_pickle.py
      - run: python -m pytest -n 2 modin/pandas/test/test_series.py
      - run: python -m pytest -n 2 modin/pandas/test/test_rolling.py
      - run: python -m pytest -n 2 modin/pandas/test/test_concat.py
        if: matrix.engine == 'python'
      - run: python -m pytest modin/pandas/test/test_concat.py # Ray and Dask versions fails with -n 2
        if: matrix.engine != 'python'
      - run: python -m pytest -n 2 modin/pandas/test/test_reshape.py
      - run: python -m pytest -n 2 modin/pandas/test/test_general.py
      - run: chmod +x ./.github/workflows/sql_server/set_up_sql_server.sh
      - run: ./.github/workflows/sql_server/set_up_sql_server.sh
      - run: python -m pytest -rP modin/pandas/test/test_io.py
      - run: python -m pytest modin/experimental/pandas/test/test_io_exp.py
      - run: pytest modin/test/exchange/dataframe_protocol/test_general.py
      - run: pytest modin/test/exchange/dataframe_protocol/pandas/test_protocol.py
      - uses: codecov/codecov-action@v2
